<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="sdkgx|EEzgfkU3:uXWTY" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="6~;?*1QY|CF*F8L|DX](" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace mbit_Display {" line1="    " line2="    export enum enColor {" line3="" line4="        //% blockId=&quot;OFF&quot; block=&quot;off&quot;" line5="        OFF = 0," line6="        //% blockId=&quot;Red&quot; block=&quot;red&quot;" line7="        Red," line8="        //% blockId=&quot;Green&quot; block=&quot;green&quot;" line9="        Green," line10="        //% blockId=&quot;Blue&quot; block=&quot;blue&quot;" line11="        Blue," line12="        //% blockId=&quot;White&quot; block=&quot;white&quot;" line13="        White," line14="        //% blockId=&quot;Cyan&quot; block=&quot;cyan&quot;" line15="        Cyan," line16="        //% blockId=&quot;Pinkish&quot; block=&quot;magenta&quot;" line17="        Pinkish," line18="        //% blockId=&quot;Yellow&quot; block=&quot;yellow&quot;" line19="        Yellow," line20="" line21="    }" line22="    export enum enLED1 {" line23="        " line24="        //% blockId=&quot;OFF&quot; block=&quot;off&quot;" line25="        OFF = 0," line26="        //% blockId=&quot;ON&quot; block=&quot;on&quot;" line27="        ON =1" line28="    }" line29="" line30="    //% blockId=mbit_LED1 block=&quot;LED1|pin %pin|value %value&quot;" line31="    //% weight=5" line32="    //% blockGap=8" line33="    //% color=&quot;#C814B8&quot;" line34="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=1" line35="    export function LED1(pin: DigitalPin, value: enLED1): void {" line36="" line37="        pins.digitalWritePin(pin, value);" line38="" line39="    }" line40="" line41="    //% blockId=mbit_LED2 block=&quot;LED2|pin %pin|value %value&quot;" line42="    //% weight=4" line43="    //% blockGap=8" line44="    //% color=&quot;#C814B8&quot;" line45="    //% value.min=0 value.max=255" line46="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=2" line47="    export function LED2(pin: AnalogPin, value: number): void {" line48="" line49="        pins.analogWritePin(pin, value * 1024 / 256);" line50="" line51="    }" line52="" line53="    //% blockId=mbit_BreathLED block=&quot;BreathLED|pin %pin&quot;" line54="    //% weight=3" line55="    //% blockGap=8" line56="    //% color=&quot;#C814B8&quot;" line57="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=3" line58="    export function BreathLED(pin: AnalogPin): void {" line59="" line60="        for (let i: number = 0; i &lt; 1023; i++) {" line61="            pins.analogWritePin(pin, i);" line62="            //basic.pause(1);" line63="            control.waitMicros(1000);" line64="        }" line65="        basic.pause(10);" line66="        for (let j: number = 1023; j &gt; 0; j--) {" line67="            pins.analogWritePin(pin, j);" line68="            //basic.pause(1);" line69="            control.waitMicros(1000);" line70="        }" line71="" line72="    }" line73="" line74="    //% blockId=mbit_RGB block=&quot;RGB|pin1 %pin1|pin2 %pin2|pin3 %pin3|value1 %value1|value2 %value2|value3 %value3&quot;" line75="    //% weight=2" line76="    //% blockGap=8" line77="    //% color=&quot;#C814B8&quot;" line78="    //% value1.min=0 value1.max=255 value2.min=0 value2.max=255 value3.min=0 value3.max=255" line79="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=4" line80="    export function RGB(pin1: AnalogPin, pin2: AnalogPin, pin3: AnalogPin, value1: number, value2: number, value3: number): void {" line81="" line82="        pins.analogWritePin(pin1, value1 * 1024 / 256);" line83="        pins.analogWritePin(pin2, value2 * 1024 / 256);" line84="        pins.analogWritePin(pin3, value3 * 1024 / 256);" line85="" line86="    }" line87="    //% blockId=mbit_RGB2 block=&quot;RGB|pin1 %pin1|pin2 %pin2|pin3 %pin3|value %value&quot;" line88="    //% weight=1" line89="    //% blockGap=8" line90="    //% color=&quot;#C814B8&quot;" line91="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=4" line92="    export function RGB2(pin1: DigitalPin, pin2: DigitalPin, pin3: DigitalPin, value: enColor): void {" line93="" line94="        switch (value) {" line95="            case enColor.OFF: {" line96="                pins.digitalWritePin(pin1, 0);" line97="                pins.digitalWritePin(pin2, 0);" line98="                pins.digitalWritePin(pin3, 0);" line99="                break;" line100="            }" line101="            case enColor.Red: {" line102="                pins.digitalWritePin(pin1, 1);" line103="                pins.digitalWritePin(pin2, 0);" line104="                pins.digitalWritePin(pin3, 0);" line105="                break;" line106="            }" line107="            case enColor.Green: {" line108="                pins.digitalWritePin(pin1, 0);" line109="                pins.digitalWritePin(pin2, 1);" line110="                pins.digitalWritePin(pin3, 0);" line111="                break;" line112="            }" line113="            case enColor.Blue: {" line114="                pins.digitalWritePin(pin1, 0);" line115="                pins.digitalWritePin(pin2, 0);" line116="                pins.digitalWritePin(pin3, 1);" line117="                break;" line118="            }" line119="            case enColor.White: {" line120="                pins.digitalWritePin(pin1, 1);" line121="                pins.digitalWritePin(pin2, 1);" line122="                pins.digitalWritePin(pin3, 1);" line123="                break;" line124="            }" line125="            case enColor.Cyan: {" line126="                pins.digitalWritePin(pin1, 0);" line127="                pins.digitalWritePin(pin2, 1);" line128="                pins.digitalWritePin(pin3, 1);" line129="                break;" line130="            }" line131="            case enColor.Pinkish: {" line132="                pins.digitalWritePin(pin1, 1);" line133="                pins.digitalWritePin(pin2, 0);" line134="                pins.digitalWritePin(pin3, 1);" line135="                break;" line136="            }" line137="            case enColor.Yellow: {" line138="                pins.digitalWritePin(pin1, 1);" line139="                pins.digitalWritePin(pin2, 1);" line140="                pins.digitalWritePin(pin3, 0);" line141="                break;" line142="            }" line143="        }" line144="" line145="    }" line146="   " line147="}" numlines="148"></mutation><next><block type="typescript_statement" id="Lodt7OF/@W3H4~O@Z3Ch" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace mbit_Sensor {" line1="" line2="    export enum enVoice {" line3="        //% blockId=&quot;Voice&quot; block=&quot;sound&quot;" line4="        Voice = 0," line5="        //% blockId=&quot;NoVoice&quot; block=&quot;silence&quot;" line6="        NoVoice = 1" line7="    }" line8="" line9="    export enum enIR {" line10="        //% blockId=&quot;Get&quot; block=&quot;detected&quot;" line11="        Get = 0," line12="        //% blockId=&quot;NoVoice&quot; block=&quot;undetected&quot;" line13="        NoGet = 1" line14="    }" line15="    " line16="" line17="    //% blockId=mbit_Voice_Sensor block=&quot;Voice_Sensor|pin %pin|value %value&quot;" line18="    //% weight=100" line19="    //% blockGap=10" line20="    //% color=&quot;#87CEEB&quot;" line21="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=4" line22="    export function Voice_Sensor(pin: DigitalPin, value: enVoice): boolean {" line23="" line24="        pins.setPull(pin, PinPullMode.PullUp);" line25="        if (pins.digitalReadPin(pin) == value) {" line26="            return true;" line27="        }" line28="        else {" line29="            return false;" line30="        }" line31="" line32="    }" line33="" line34="    function IR_send_38k() {" line35="        for (let k: number = 0; k &lt; 8; k++) {" line36="            pins.digitalWritePin(DigitalPin.P9, 1);" line37="            control.waitMicros(13);" line38="            pins.digitalWritePin(DigitalPin.P9, 0);" line39="            control.waitMicros(13);" line40="        }" line41="    }" line42="    //% blockId=mbit_IR_Sensor block=&quot;IR_Sensor|pin %pin| |%value|obstacle&quot;" line43="    //% weight=100" line44="    //% blockGap=10" line45="    //% color=&quot;#87CEEB&quot;" line46="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=4" line47="    export function IR_Sensor(pin: DigitalPin, value: enIR): boolean {" line48="" line49="        pins.setPull(pin, PinPullMode.PullUp);" line50="        //IR_send_38k();" line51="        if (pins.digitalReadPin(pin) == value) {" line52="            return true;" line53="        }" line54="        else {" line55="            return false;" line56="        }" line57="" line58="    }" line59="" line60="    //% blockId=mbit_IR_Send block=&quot;IR_Send|pin %pin&quot;" line61="    //% weight=100" line62="    //% blockGap=10" line63="    //% color=&quot;#87CEEB&quot;" line64="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=4" line65="    export function IR_Send(pin: DigitalPin): void {" line66="" line67="        " line68="        IR_send_38k();" line69="" line70="    }" line71="   " line72="    //% blockId=mbit_ultrasonic block=&quot;Ultrasonic|Trig %Trig|Echo %Echo&quot;" line73="    //% color=&quot;#87CEEB&quot;" line74="    //% weight=100" line75="    //% blockGap=10" line76="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=4" line77="    export function Ultrasonic(Trig: DigitalPin, Echo: DigitalPin): number {" line78="" line79="        // send pulse" line80="        pins.setPull(Trig, PinPullMode.PullNone);" line81="        pins.digitalWritePin(Trig, 0);" line82="        control.waitMicros(2);" line83="        pins.digitalWritePin(Trig, 1);" line84="        control.waitMicros(15);" line85="        pins.digitalWritePin(Trig, 0);" line86="" line87="        // read pulse" line88="        let d = pins.pulseIn(Echo, PulseValue.High, 23200);" line89="        return  Math.floor(d / 58);" line90="    }" line91="}" numlines="92"></mutation><next><block type="typescript_statement" id="f6Szn|EY@b+!|)`Bda2(" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace mbit_Input {" line1="" line2="    export enum enRocker {" line3="        //% blockId=&quot;Nostate&quot; block=&quot;No&quot;" line4="        Nostate = 0," line5="        //% blockId=&quot;Up&quot; block=&quot;up&quot;" line6="        Up," line7="        //% blockId=&quot;Down&quot; block=&quot;down&quot;" line8="        Down," line9="        //% blockId=&quot;Left&quot; block=&quot;left&quot;" line10="        Left," line11="        //% blockId=&quot;Right&quot; block=&quot;right&quot;" line12="        Right," line13="        //% blockId=&quot;Press&quot; block=&quot;press&quot;" line14="        Press" line15="    }" line16="" line17="    export enum enTouch {" line18="        //% blockId=&quot;NoTouch&quot; block=&quot;untouched&quot;" line19="        NoTouch = 0," line20="        //% blockId=&quot;Touch&quot; block=&quot;touched&quot;" line21="        Touch = 1" line22="    }" line23="    export enum enButton {" line24="        //% blockId=&quot;Press&quot; block=&quot;press&quot;" line25="        Press = 0," line26="        //% blockId=&quot;Realse&quot; block=&quot;release&quot;" line27="        Realse = 1" line28="    }" line29="" line30="    //% blockId=mbit_TouchPad block=&quot;TouchPad|pin %pin|value %value&quot;" line31="    //% weight=100" line32="    //% blockGap=10" line33="    //% color=&quot;#808080&quot;" line34="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=5" line35="    export function TouchPad(pin: DigitalPin, value: enTouch): boolean {" line36="" line37="        pins.setPull(pin, PinPullMode.PullUp);" line38="        if (pins.digitalReadPin(pin) == value) {" line39="            return true;" line40="        }" line41="        else {" line42="            return false;" line43="        }" line44="" line45="    }" line46="    //% blockId=mbit_Rocker block=&quot;Rocker|VRX %pin1|VRY %pin2|SW %pin3|value %value&quot;" line47="    //% weight=100" line48="    //% blockGap=10" line49="    //% color=&quot;#808080&quot;" line50="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=6" line51="    export function Rocker(pin1: AnalogPin, pin2: AnalogPin, pin3: DigitalPin, value: enRocker): boolean {" line52="" line53="        pins.setPull(pin3, PinPullMode.PullUp);" line54="        let x = pins.analogReadPin(pin1);" line55="        let y = pins.analogReadPin(pin2);" line56="        let z = pins.digitalReadPin(pin3);" line57="        let now_state = enRocker.Nostate;" line58="" line59="        if (x &lt; 100) // 上" line60="        {" line61="" line62="            now_state = enRocker.Up;" line63="" line64="        }" line65="        else if (x &gt; 700) //" line66="        {" line67="" line68="            now_state = enRocker.Down;" line69="        }" line70="        else  // 左右" line71="        {" line72="            if (y &lt; 100) //右" line73="            {" line74="                now_state = enRocker.Right;" line75="            }" line76="            else if (y &gt; 700) //左" line77="            {" line78="                now_state = enRocker.Left;" line79="            }" line80="        }" line81="        if (z == 0)" line82="            now_state = enRocker.Press;" line83="        if (now_state == value)" line84="            return true;" line85="        else" line86="            return false;" line87="" line88="    }" line89="" line90="    //% blockId=mbit_Button block=&quot;Button|pin %pin|value %value&quot;" line91="    //% weight=100" line92="    //% blockGap=10" line93="    //% color=&quot;#808080&quot;" line94="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=5" line95="    export function Button(pin: DigitalPin, value: enButton): boolean {" line96="" line97="        pins.setPull(pin, PinPullMode.PullUp);" line98="        if (pins.digitalReadPin(pin) == value) {" line99="            return true;" line100="        }" line101="        else {" line102="            return false;" line103="        }" line104="" line105="    }  " line106="}" numlines="107"></mutation><next><block type="typescript_statement" id="IGj1:R[Tz-xGLxnLiqui" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace mbit_Music {" line1="    export enum enBuzzer {" line2="" line3="        //% blockId=&quot;NoBeep&quot; block=&quot;silence&quot;" line4="        NoBeep = 0," line5="        //% blockId=&quot;Beep&quot; block=&quot;sound&quot;" line6="        Beep" line7="    }" line8="" line9="    //% blockId=mbit_Buzzer block=&quot;Buzzer|pin %pin|value %value&quot;" line10="    //% weight=100" line11="    //% blockGap=10 " line12="    //% color=&quot;#D2691E&quot;" line13="    //% value.min=0 value.max=1" line14="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=8" line15="    export function Buzzer(pin: DigitalPin, value: enBuzzer): void {" line16="" line17="        pins.setPull(pin, PinPullMode.PullNone);" line18="        pins.digitalWritePin(pin, value);" line19="" line20="    }" line21="" line22="}" numlines="23"></mutation><next><block type="typescript_statement" id="pq[iCjftmQ}w{tq7Ty~g" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace mbit_Motor {" line1="" line2="    //% blockId=mbit_Fan block=&quot;Fan|pin %pin|speed %value&quot;" line3="    //% weight=100" line4="    //% blockGap=10" line5="    //% color=&quot;#0000CD&quot;" line6="    //% value.min=0 value.max=1023" line7="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=9" line8="    export function Fan(pin: AnalogPin, value: number): void {" line9="" line10="        pins.analogWritePin(pin, value);" line11="" line12="    }" line13="" line14="    //% blockId=mbit_Servo block=&quot;Servo|pin %pin|value %value&quot;" line15="    //% weight=100" line16="    //% blockGap=10" line17="    //% color=&quot;#0000CD&quot;" line18="    //% value.min=0 value.max=180" line19="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=9" line20="    export function Servo(pin: AnalogPin, value: number): void {" line21="" line22="        pins.servoWritePin(pin, value);" line23="" line24="    }" line25="" line26="}" numlines="27"></mutation><next><block type="typescript_statement" id=";9nCw.kq;opf~F!h@-2D" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace mbit_Robot {" line1="" line2="    const PCA9685_ADD = 0x41" line3="    const MODE1 = 0x00" line4="    const MODE2 = 0x01" line5="    const SUBADR1 = 0x02" line6="    const SUBADR2 = 0x03" line7="    const SUBADR3 = 0x04" line8="" line9="    const LED0_ON_L = 0x06" line10="    const LED0_ON_H = 0x07" line11="    const LED0_OFF_L = 0x08" line12="    const LED0_OFF_H = 0x09" line13="" line14="    const ALL_LED_ON_L = 0xFA" line15="    const ALL_LED_ON_H = 0xFB" line16="    const ALL_LED_OFF_L = 0xFC" line17="    const ALL_LED_OFF_H = 0xFD" line18="" line19="    const PRESCALE = 0xFE" line20="" line21="    let initialized = false" line22="    let yahStrip: neopixel.Strip;" line23="" line24="    export enum enColor {" line25="" line26="        //% blockId=&quot;OFF&quot; block=&quot;off&quot;" line27="        OFF = 0," line28="        //% blockId=&quot;Red&quot; block=&quot;red&quot;" line29="        Red," line30="        //% blockId=&quot;Green&quot; block=&quot;green&quot;" line31="        Green," line32="        //% blockId=&quot;Blue&quot; block=&quot;blue&quot;" line33="        Blue," line34="        //% blockId=&quot;White&quot; block=&quot;white&quot;" line35="        White," line36="        //% blockId=&quot;Cyan&quot; block=&quot;cyan&quot;" line37="        Cyan," line38="        //% blockId=&quot;Pinkish&quot; block=&quot;magenta&quot;" line39="        Pinkish," line40="        //% blockId=&quot;Yellow&quot; block=&quot;yellow&quot;" line41="        Yellow," line42="" line43="    }" line44="    export enum enMusic {" line45="" line46="        dadadum = 0," line47="        entertainer," line48="        prelude," line49="        ode," line50="        nyan," line51="        ringtone," line52="        funk," line53="        blues," line54="" line55="        birthday," line56="        wedding," line57="        funereal," line58="        punchline," line59="        baddy," line60="        chase," line61="        ba_ding," line62="        wawawawaa," line63="        jump_up," line64="        jump_down," line65="        power_up," line66="        power_down" line67="    }" line68="    export enum enPos {" line69="" line70="        //% blockId=&quot;LeftState&quot; block=&quot;left state&quot;" line71="        LeftState = 0," line72="        //% blockId=&quot;RightState&quot; block=&quot;right state&quot;" line73="        RightState = 1" line74="    }" line75="" line76="    export enum enLineState {" line77="        //% blockId=&quot;White&quot; block=&quot;white&quot;" line78="        White = 0," line79="        //% blockId=&quot;Black&quot; block=&quot;black&quot;" line80="        Black = 1" line81="" line82="    }" line83="    " line84="    export enum enAvoidState {" line85="        //% blockId=&quot;OBSTACLE&quot; block=&quot;with obstacles&quot;" line86="        OBSTACLE = 0," line87="        //% blockId=&quot;NOOBSTACLE&quot; block=&quot;without obstacles&quot;" line88="        NOOBSTACLE = 1" line89="" line90="    }" line91="" line92="    " line93="    export enum enServo {" line94="        " line95="        S1 = 1," line96="        S2," line97="        S3" line98="    }" line99="    export enum CarState {" line100="        //% blockId=&quot;Car_Run&quot; block=&quot;forward&quot;" line101="        Car_Run = 1," line102="        //% blockId=&quot;Car_Back&quot; block=&quot;back&quot;" line103="        Car_Back = 2," line104="        //% blockId=&quot;Car_Left&quot; block=&quot;turn left&quot;" line105="        Car_Left = 3," line106="        //% blockId=&quot;Car_Right&quot; block=&quot;turn right&quot;" line107="        Car_Right = 4," line108="        //% blockId=&quot;Car_Stop&quot; block=&quot;stop&quot;" line109="        Car_Stop = 5," line110="        //% blockId=&quot;Car_SpinLeft&quot; block=&quot;rotate left&quot;" line111="        Car_SpinLeft = 6," line112="        //% blockId=&quot;Car_SpinRight&quot; block=&quot;rotate right&quot;" line113="        Car_SpinRight = 7" line114="    }" line115="" line116="    function i2cwrite(addr: number, reg: number, value: number) {" line117="        let buf = pins.createBuffer(2)" line118="        buf[0] = reg" line119="        buf[1] = value" line120="        pins.i2cWriteBuffer(addr, buf)" line121="    }" line122="" line123="    function i2ccmd(addr: number, value: number) {" line124="        let buf2 = pins.createBuffer(1)" line125="        buf2[0] = value" line126="        pins.i2cWriteBuffer(addr, buf2)" line127="    }" line128="" line129="    function i2cread(addr: number, reg: number) {" line130="        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);" line131="        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);" line132="        return val;" line133="    }" line134="" line135="    function initPCA9685(): void {" line136="        i2cwrite(PCA9685_ADD, MODE1, 0x00)" line137="        setFreq(50);" line138="        initialized = true" line139="    }" line140="" line141="    function setFreq(freq: number): void {" line142="        // Constrain the frequency" line143="        let prescaleval = 25000000;" line144="        prescaleval /= 4096;" line145="        prescaleval /= freq;" line146="        prescaleval -= 1;" line147="        let prescale = prescaleval; //Math.Floor(prescaleval + 0.5);" line148="        let oldmode = i2cread(PCA9685_ADD, MODE1);" line149="        let newmode = (oldmode &amp; 0x7F) | 0x10; // sleep" line150="        i2cwrite(PCA9685_ADD, MODE1, newmode); // go to sleep" line151="        i2cwrite(PCA9685_ADD, PRESCALE, prescale); // set the prescaler" line152="        i2cwrite(PCA9685_ADD, MODE1, oldmode);" line153="        control.waitMicros(5000);" line154="        i2cwrite(PCA9685_ADD, MODE1, oldmode | 0xa1);" line155="    }" line156="" line157="    function setPwm(channel: number, on: number, off: number): void {" line158="        if (channel &lt; 0 || channel &gt; 15)" line159="            return;" line160="        if (!initialized) {" line161="            initPCA9685();" line162="        }" line163="        let buf3 = pins.createBuffer(5);" line164="        buf3[0] = LED0_ON_L + 4 * channel;" line165="        buf3[1] = on &amp; 0xff;" line166="        buf3[2] = (on &gt;&gt; 8) &amp; 0xff;" line167="        buf3[3] = off &amp; 0xff;" line168="        buf3[4] = (off &gt;&gt; 8) &amp; 0xff;" line169="        pins.i2cWriteBuffer(PCA9685_ADD, buf3);" line170="    }" line171="" line172="" line173="    function Car_run(speed1: number, speed2: number) {" line174="" line175="        speed1 = speed1 * 16; // map 350 to 4096" line176="        speed2 = speed2 * 16;" line177="        if (speed1 &gt;= 4096) {" line178="            speed1 = 4095" line179="        }" line180="        if (speed2 &gt;= 4096) {" line181="            speed2 = 4095" line182="        }" line183="" line184="        setPwm(12, 0, speed1);" line185="        setPwm(13, 0, 0);" line186="" line187="        setPwm(15, 0, speed2);" line188="        setPwm(14, 0, 0);" line189="        //pins.digitalWritePin(DigitalPin.P16, 1);" line190="       // pins.analogWritePin(AnalogPin.P1, 1023-speed); //速度控制" line191="" line192="       // pins.analogWritePin(AnalogPin.P0, speed);//速度控制" line193="       // pins.digitalWritePin(DigitalPin.P8, 0);" line194="    }" line195="" line196="    function Car_back(speed1: number, speed2: number) {" line197="" line198="        speed1 = speed1 * 16; // map 350 to 4096" line199="        speed2 = speed2 * 16;" line200="        if (speed1 &gt;= 4096) {" line201="            speed1 = 4095" line202="        }" line203="        if (speed2 &gt;= 4096) {" line204="            speed2 = 4095" line205="        }" line206="        setPwm(12, 0, 0);" line207="        setPwm(13, 0, speed1);" line208="" line209="        setPwm(15, 0, 0);" line210="        setPwm(14, 0, speed2);" line211="" line212="        //pins.digitalWritePin(DigitalPin.P16, 0);" line213="        //pins.analogWritePin(AnalogPin.P1, speed); //速度控制" line214="" line215="        //pins.analogWritePin(AnalogPin.P0, 1023 - speed);//速度控制" line216="        //pins.digitalWritePin(DigitalPin.P8, 1);" line217="    }" line218="" line219="    function Car_left(speed1: number, speed2: number) {" line220="" line221="        speed1 = speed1 * 16; // map 350 to 4096" line222="        speed2 = speed2 * 16;" line223="        if (speed1 &gt;= 4096) {" line224="            speed1 = 4095" line225="        }" line226="        if (speed2 &gt;= 4096) {" line227="            speed2 = 4095" line228="        }" line229="        " line230="        setPwm(12, 0, speed1);" line231="        setPwm(13, 0, 0);" line232="" line233="        setPwm(15, 0, speed2);" line234="        setPwm(14, 0, 0);" line235="" line236="        //pins.analogWritePin(AnalogPin.P0, speed);" line237="        //pins.digitalWritePin(DigitalPin.P8, 0);" line238="" line239="        //pins.digitalWritePin(DigitalPin.P16, 0);" line240="        //pins.digitalWritePin(DigitalPin.P1, 0);" line241="    }" line242="" line243="    function Car_right(speed1: number, speed2: number) {" line244="" line245="        speed1 = speed1 * 16; // map 350 to 4096" line246="        speed2 = speed2 * 16;" line247="        if (speed1 &gt;= 4096) {" line248="            speed1 = 4095" line249="        }" line250="        if (speed2 &gt;= 4096) {" line251="            speed2 = 4095" line252="        }" line253="        " line254="        setPwm(12, 0, speed1);" line255="        setPwm(13, 0, 0);" line256="" line257="        setPwm(15, 0, speed2);" line258="        setPwm(14, 0, 0);" line259="        //pins.digitalWritePin(DigitalPin.P0, 0);" line260="        //pins.digitalWritePin(DigitalPin.P8, 0);" line261="" line262="        //pins.digitalWritePin(DigitalPin.P16, 1);" line263="       // pins.analogWritePin(AnalogPin.P1, 1023 - speed);" line264="    }" line265="" line266="    function Car_stop() {" line267="       " line268="        setPwm(12, 0, 0);" line269="        setPwm(13, 0, 0);" line270="" line271="        setPwm(15, 0, 0);" line272="        setPwm(14, 0, 0);" line273="        //pins.digitalWritePin(DigitalPin.P0, 0);" line274="        //pins.digitalWritePin(DigitalPin.P8, 0);" line275="        //pins.digitalWritePin(DigitalPin.P16, 0);" line276="        //pins.digitalWritePin(DigitalPin.P1, 0);" line277="    }" line278="" line279="    function Car_spinleft(speed1: number, speed2: number) {" line280="" line281="        speed1 = speed1 * 16; // map 350 to 4096" line282="        speed2 = speed2 * 16;" line283="        if (speed1 &gt;= 4096) {" line284="            speed1 = 4095" line285="        }" line286="        if (speed2 &gt;= 4096) {" line287="            speed2 = 4095" line288="        }        " line289="        " line290="        setPwm(12, 0, 0);" line291="        setPwm(13, 0, speed1);" line292="" line293="        setPwm(15, 0, speed2);" line294="        setPwm(14, 0, 0);" line295="" line296="        //pins.analogWritePin(AnalogPin.P0, speed);" line297="        //pins.digitalWritePin(DigitalPin.P8, 0);" line298="" line299="        //pins.digitalWritePin(DigitalPin.P16, 0);" line300="        //pins.analogWritePin(AnalogPin.P1, speed);" line301="    } " line302="" line303="    function Car_spinright(speed1: number, speed2: number) {" line304="" line305="        speed1 = speed1 * 16; // map 350 to 4096" line306="        speed2 = speed2 * 16;" line307="        if (speed1 &gt;= 4096) {" line308="            speed1 = 4095" line309="        }" line310="        if (speed2 &gt;= 4096) {" line311="            speed2 = 4095" line312="        }      " line313="        setPwm(12, 0, speed1);" line314="        setPwm(13, 0, 0);" line315="" line316="        setPwm(15, 0, 0);" line317="        setPwm(14, 0, speed2);" line318="        //pins.analogWritePin(AnalogPin.P0, 1023-speed);" line319="        //pins.digitalWritePin(DigitalPin.P8, 1);" line320="" line321="        //pins.digitalWritePin(DigitalPin.P16, 1);" line322="        //pins.analogWritePin(AnalogPin.P1, 1023-speed);" line323="" line324="    }" line325="" line326="    /**" line327="     * *****************************************************************" line328="     * @param index" line329="     */" line330="    //% blockId=mbit_RGB_Car_Big2 block=&quot;RGB_Car_Big2|value %value&quot;" line331="    //% weight=101" line332="    //% blockGap=10" line333="    //% color=&quot;#C814B8&quot;" line334="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=4" line335="    export function RGB_Car_Big2(value: enColor): void {" line336="" line337="        switch (value) {" line338="            case enColor.OFF: {" line339="                setPwm(0, 0, 0);" line340="                setPwm(1, 0, 0);" line341="                setPwm(2, 0, 0);" line342="                break;" line343="            }" line344="            case enColor.Red: {" line345="                setPwm(0, 0, 4095);" line346="                setPwm(1, 0, 0);" line347="                setPwm(2, 0, 0);" line348="                break;" line349="            }" line350="            case enColor.Green: {" line351="                setPwm(0, 0, 0);" line352="                setPwm(1, 0, 4095);" line353="                setPwm(2, 0, 0);" line354="                break;" line355="            }" line356="            case enColor.Blue: {" line357="                setPwm(0, 0, 0);" line358="                setPwm(1, 0, 0);" line359="                setPwm(2, 0, 4095);" line360="                break;" line361="            }" line362="            case enColor.White: {" line363="                setPwm(0, 0, 4095);" line364="                setPwm(1, 0, 4095);" line365="                setPwm(2, 0, 4095);" line366="                break;" line367="            }" line368="            case enColor.Cyan: {" line369="                setPwm(0, 0, 0);" line370="                setPwm(1, 0, 4095);" line371="                setPwm(2, 0, 4095);" line372="                break;" line373="            }" line374="            case enColor.Pinkish: {" line375="                setPwm(0, 0, 4095);" line376="                setPwm(1, 0, 0);" line377="                setPwm(2, 0, 4095);" line378="                break;" line379="            }" line380="            case enColor.Yellow: {" line381="                setPwm(0, 0, 4095);" line382="                setPwm(1, 0, 4095);" line383="                setPwm(2, 0, 0);" line384="                break;" line385="            }" line386="        }" line387="    }" line388="    //% blockId=mbit_RGB_Car_Big block=&quot;RGB_Car_Big|value1 %value1|value2 %value2|value3 %value3&quot;" line389="    //% weight=100" line390="    //% blockGap=10" line391="    //% color=&quot;#C814B8&quot;" line392="    //% value1.min=0 value1.max=255 value2.min=0 value2.max=255 value3.min=0 value3.max=255" line393="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=4" line394="    export function RGB_Car_Big(value1: number, value2: number, value3: number): void {" line395="" line396="        let R = value1 * 16;" line397="        let G = value2 * 16;" line398="        let B = value3 * 16;" line399="" line400="        if (R &gt; 4096)" line401="            R = 4095;" line402="        if (G &gt; 4096)" line403="            G = 4095;" line404="        if (B &gt; 4096)" line405="            B = 4095;" line406="" line407="        setPwm(0, 0, R);" line408="        setPwm(1, 0, G);" line409="        setPwm(2, 0, B);" line410="" line411="    }" line412="" line413="    //% blockId=mbit_RGB_Car_Program block=&quot;RGB_Car_Program&quot;" line414="    //% weight=99" line415="    //% blockGap=10" line416="    //% color=&quot;#C814B8&quot;" line417="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=4" line418="    export function RGB_Car_Program(): neopixel.Strip {" line419="         " line420="        if (!yahStrip) {" line421="            yahStrip = neopixel.create(DigitalPin.P16, 3, NeoPixelMode.RGB);" line422="        }" line423="        return yahStrip;  " line424="    }" line425="" line426="" line427="&#9;//% blockId=mbit_ultrasonic_car block=&quot;ultrasonic return distance(cm)&quot;" line428="    //% color=&quot;#006400&quot;" line429="    //% weight=98" line430="    //% blockGap=10" line431="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=4" line432="    export function Ultrasonic_Car(): number {" line433="" line434="        // send pulse" line435="        let list:Array&lt;number&gt; = [0, 0, 0, 0, 0];" line436="        for (let l = 0; l &lt; 5; l++) {" line437="&#9;&#9;pins.setPull(DigitalPin.P14, PinPullMode.PullNone);" line438="&#9;&#9;pins.digitalWritePin(DigitalPin.P14, 0);" line439="&#9;&#9;control.waitMicros(2);" line440="&#9;&#9;pins.digitalWritePin(DigitalPin.P14, 1);" line441="&#9;&#9;control.waitMicros(15);" line442="&#9;&#9;pins.digitalWritePin(DigitalPin.P14, 0);" line443="&#9;&#9;" line444="&#9;&#9;let e = pins.pulseIn(DigitalPin.P15, PulseValue.High, 43200);" line445="&#9;&#9;list[l] = Math.floor(e / 40)" line446="        }" line447="        list.sort();" line448="        let length = (list[1] + list[2] + list[3])/3;" line449="        return  Math.floor(length);" line450="    }" line451="" line452="    //% blockId=mbit_Music_Car block=&quot;Music_Car|%index&quot;" line453="    //% weight=97" line454="    //% blockGap=10" line455="    //% color=&quot;#006400&quot;" line456="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=4" line457="    export function Music_Car(index: enMusic): void {" line458="        switch (index) {" line459="            case enMusic.dadadum: music.beginMelody(music.builtInMelody(Melodies.Dadadadum), MelodyOptions.Once); break;" line460="            case enMusic.birthday: music.beginMelody(music.builtInMelody(Melodies.Birthday), MelodyOptions.Once); break;" line461="            case enMusic.entertainer: music.beginMelody(music.builtInMelody(Melodies.Entertainer), MelodyOptions.Once); break;" line462="            case enMusic.prelude: music.beginMelody(music.builtInMelody(Melodies.Prelude), MelodyOptions.Once); break;" line463="            case enMusic.ode: music.beginMelody(music.builtInMelody(Melodies.Ode), MelodyOptions.Once); break;" line464="            case enMusic.nyan: music.beginMelody(music.builtInMelody(Melodies.Nyan), MelodyOptions.Once); break;" line465="            case enMusic.ringtone: music.beginMelody(music.builtInMelody(Melodies.Ringtone), MelodyOptions.Once); break;" line466="            case enMusic.funk: music.beginMelody(music.builtInMelody(Melodies.Funk), MelodyOptions.Once); break;" line467="            case enMusic.blues: music.beginMelody(music.builtInMelody(Melodies.Blues), MelodyOptions.Once); break;" line468="            case enMusic.wedding: music.beginMelody(music.builtInMelody(Melodies.Wedding), MelodyOptions.Once); break;" line469="            case enMusic.funereal: music.beginMelody(music.builtInMelody(Melodies.Funeral), MelodyOptions.Once); break;" line470="            case enMusic.punchline: music.beginMelody(music.builtInMelody(Melodies.Punchline), MelodyOptions.Once); break;" line471="            case enMusic.baddy: music.beginMelody(music.builtInMelody(Melodies.Baddy), MelodyOptions.Once); break;" line472="            case enMusic.chase: music.beginMelody(music.builtInMelody(Melodies.Chase), MelodyOptions.Once); break;" line473="            case enMusic.ba_ding: music.beginMelody(music.builtInMelody(Melodies.BaDing), MelodyOptions.Once); break;" line474="            case enMusic.wawawawaa: music.beginMelody(music.builtInMelody(Melodies.Wawawawaa), MelodyOptions.Once); break;" line475="            case enMusic.jump_up: music.beginMelody(music.builtInMelody(Melodies.JumpUp), MelodyOptions.Once); break;" line476="            case enMusic.jump_down: music.beginMelody(music.builtInMelody(Melodies.JumpDown), MelodyOptions.Once); break;" line477="            case enMusic.power_up: music.beginMelody(music.builtInMelody(Melodies.PowerUp), MelodyOptions.Once); break;" line478="            case enMusic.power_down: music.beginMelody(music.builtInMelody(Melodies.PowerDown), MelodyOptions.Once); break;" line479="        }" line480="    }" line481="    //% blockId=mbit_Servo_Car block=&quot;Servo_Car|num %num|value %value&quot;" line482="    //% weight=96" line483="    //% blockGap=10" line484="    //% color=&quot;#006400&quot;" line485="    //% num.min=1 num.max=3 value.min=0 value.max=180" line486="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=9" line487="    export function Servo_Car(num: enServo, value: number): void {" line488="" line489="        // 50hz: 20,000 us" line490="        let us = (value * 1800 / 180 + 600); // 0.6 ~ 2.4" line491="        let pwm = us * 4096 / 20000;" line492="        setPwm(num + 2, 0, pwm);" line493="" line494="    }" line495="" line496="    //% blockId=mbit_Avoid_Sensor block=&quot;Avoid_Sensor|value %value&quot;" line497="    //% weight=95" line498="    //% blockGap=10" line499="    //% color=&quot;#006400&quot;" line500="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=12" line501="    export function Avoid_Sensor(value: enAvoidState): boolean {" line502="" line503="        let temp: boolean = false;" line504="        pins.digitalWritePin(DigitalPin.P9, 0);" line505="        switch (value) {" line506="            case enAvoidState.OBSTACLE: {" line507="                if (pins.analogReadPin(AnalogPin.P3) &lt; 800) {" line508="                " line509="                    temp = true;" line510="                    setPwm(8, 0, 0);" line511="                }" line512="                else {                 " line513="                    temp = false;" line514="                    setPwm(8, 0, 4095);" line515="                }" line516="                break;" line517="            }" line518="" line519="            case enAvoidState.NOOBSTACLE: {" line520="                if (pins.analogReadPin(AnalogPin.P3) &gt; 800) {" line521="" line522="                    temp = true;" line523="                    setPwm(8, 0, 4095);" line524="                }" line525="                else {" line526="                    temp = false;" line527="                    setPwm(8, 0, 0);" line528="                }" line529="                break;" line530="            }" line531="        }" line532="        pins.digitalWritePin(DigitalPin.P9, 1);" line533="        return temp;" line534="" line535="    }" line536="    //% blockId=mbit_Line_Sensor block=&quot;Line_Sensor|direct %direct|value %value&quot;" line537="    //% weight=94" line538="    //% blockGap=10" line539="    //% color=&quot;#006400&quot;" line540="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=12" line541="    export function Line_Sensor(direct: enPos, value: enLineState): boolean {" line542="" line543="        let temp2: boolean = false;" line544="" line545="        switch (direct) {" line546="            case enPos.LeftState: {" line547="                if (pins.analogReadPin(AnalogPin.P2) &lt; 500) {" line548="                    if (value == enLineState.White) {" line549="                        temp2 = true;" line550="                    }" line551="                    setPwm(7, 0, 4095);" line552="                }" line553="                else {" line554="                    if (value == enLineState.Black) {" line555="                        temp2 = true;" line556="                    }" line557="                    setPwm(7, 0, 0);" line558="                }" line559="                break;" line560="            }" line561="" line562="            case enPos.RightState: {" line563="                if (pins.analogReadPin(AnalogPin.P1) &lt; 500) {" line564="                    if (value == enLineState.White) {" line565="                        temp2 = true;" line566="                    }" line567="                    setPwm(6, 0, 4095);" line568="                }" line569="                else {" line570="                    if (value == enLineState.Black) {" line571="                        temp2 = true;" line572="                    }" line573="                    setPwm(6, 0, 0);" line574="                }" line575="                break;" line576="            }" line577="        }" line578="        return temp2;" line579="" line580="    }" line581="    //% blockId=mbit_CarCtrl block=&quot;CarCtrl|%index&quot;" line582="    //% weight=93" line583="    //% blockGap=10" line584="    //% color=&quot;#006400&quot;" line585="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=10" line586="    export function CarCtrl(index: CarState): void {" line587="        switch (index) {" line588="            case CarState.Car_Run: Car_run(255, 255); break;" line589="            case CarState.Car_Back: Car_back(255, 255); break;" line590="            case CarState.Car_Left: Car_left(0, 255); break;" line591="            case CarState.Car_Right: Car_right(255, 0); break;" line592="            case CarState.Car_Stop: Car_stop(); break;" line593="            case CarState.Car_SpinLeft: Car_spinleft(255, 255); break;" line594="            case CarState.Car_SpinRight: Car_spinright(255, 255); break;" line595="        }" line596="    }" line597="    //% blockId=mbit_CarCtrlSpeed block=&quot;CarCtrlSpeed|%index|speed %speed&quot;" line598="    //% weight=92" line599="    //% blockGap=10" line600="    //% speed.min=0 speed.max=255" line601="    //% color=&quot;#006400&quot;" line602="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=10" line603="    export function CarCtrlSpeed(index: CarState, speed: number): void {" line604="        switch (index) {" line605="            case CarState.Car_Run: Car_run(speed, speed); break;" line606="            case CarState.Car_Back: Car_back(speed, speed); break;" line607="            case CarState.Car_Left: Car_left(0, speed); break;" line608="            case CarState.Car_Right: Car_right(speed, 0); break;" line609="            case CarState.Car_Stop: Car_stop(); break;" line610="            case CarState.Car_SpinLeft: Car_spinleft(speed, speed); break;" line611="            case CarState.Car_SpinRight: Car_spinright(speed, speed); break;" line612="        }" line613="    }" line614="    //% blockId=mbit_CarCtrlSpeed2 block=&quot;CarCtrlSpeed2|%index|speed1 %speed1|speed2 %speed2&quot;" line615="    //% weight=91" line616="    //% blockGap=10" line617="    //% speed1.min=0 speed1.max=255 speed2.min=0 speed2.max=255" line618="    //% color=&quot;#006400&quot;" line619="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=10" line620="    export function CarCtrlSpeed2(index: CarState, speed1: number, speed2: number): void {" line621="        switch (index) {" line622="            case CarState.Car_Run: Car_run(speed1, speed2); break;" line623="            case CarState.Car_Back: Car_back(speed1, speed2); break;" line624="            case CarState.Car_Left: Car_left(0, speed2); break;" line625="            case CarState.Car_Right: Car_right(speed1, 0); break;" line626="            case CarState.Car_Stop: Car_stop(); break;" line627="            case CarState.Car_SpinLeft: Car_spinleft(speed1, speed2); break;" line628="            case CarState.Car_SpinRight: Car_spinright(speed1, speed2); break;" line629="        }" line630="    }" line631="}" numlines="632"></mutation></block></next></block></next></block></next></block></next></block></next></block></statement></block></xml>